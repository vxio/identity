openapi: 3.0.2
info:
  title: Moov Identity Internal API
  version: 0.0.1
  description: |
    Handles all identities for tracking the users of the Moov platform.

servers:
  - url: https://local.moov.io/
    description: Local Testing
  - url: https://api.moov.io/
    description: Production

paths:

  /internal/login:
    post:
      summary: |
        Complete a login via a OIDC.
        Once the OIDC client service has authenticated their identity the client service will call 
        this endpoint to record and finish the login to get their token to use the API.

        If the client service recieves a 404 they must send them to registration if its allowed per the client or check for an invite for authenticated users email before sending to registration.      
      security:
      - ServiceAuth: []
      tags:
        - private
      requestBody:
        description: Arguments needed to match up the OIDC user data with a user in the system
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: User successfully logged in.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoggedIn'
        '404':
          description: User was not located.
          $ref: '#/components/responses/Empty'
        default:
          $ref: '#/components/responses/Empty'

  /internal/register:
    post:
      summary: |
        Register user based on OIDC credentials. 
        This is called by the OIDC client services we create to register the user with what 
        available information they have and obtain from the user.
      security:
      - ServiceAuth: []
      tags:
        - private
      requestBody:
        description: Arguments needed register a user with OIDC credentials.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
      responses:
        '200':
          description: User successfully registered, they can now log in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoggedIn'
        default:
          $ref: '#/components/responses/Empty'

components:
  responses:
    Empty:
      description: Empty response for unauthorized or any other returned http status code
      content:
        text/plain:
          schema:
            type: string
            maxLength: 0
            pattern: "//i"

  securitySchemes:
    ServiceAuth:
      type: apiKey
      in: header
      name: X-Request-Hash
      description: Hash of HMAC(X-Timestamp +'|' + X-Nonce, Secret)

  schemas:
    Login:
      description: |
        User has authenticated with an OIDC now to verify the system can find them. This verifies theirs stored credentials for a user that match the arguments
      type: object
      additionalProperties: false
      properties:
        provider:
          $ref: '#/components/schemas/Provider'
          writeOnly: true
        subjectID:
          $ref: '#/components/schemas/SubjectID'
          writeOnly: true

    Email:
      description: Email Address
      type: string
      format: email
      example: "john.doe@gmail.com"
      pattern: ^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$
      maxLength: 255
    
    LoggedIn:
      description: User has logged in and is being given a token to proof identity
      type: object
      additionalProperties: false
      properties:
        jwt:
          type: string
          description: JWT token that provides authentication of identity
          pattern: ^[A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*$
          maxLength: 4000

    SubjectID:
      description: ID of the remote OIDC server gives to this identity
      type: string
      pattern: ^[0-9a-zA-Z_-]+$
      example: aSDDfasd23Dfasdf
      maxLength: 255
      readOnly: true

    Provider:
      description: OIDC provider that was used to handle authentication of this user.
      type: string
      example: google
      pattern: ^\w+$
      maxLength: 255
      readOnly: true
    
    Register:
      description: Request to register a user in the system
      type: object
      additionalProperties: false
      properties:
        provider:
          $ref: '#/components/schemas/Provider'
          writeOnly: true
        subjectID:
          $ref: '#/components/schemas/SubjectID'
          writeOnly: true
        firstName:
          type: string
          example: John
          maxLength: 255
          pattern: ^\w+$
        middleName:
          type: string
          example: Jimmy
          maxLength: 255
          pattern: ^\w+$
        lastName:
          type: string
          example: Doe
          maxLength: 255
          pattern: ^\w+$
        nickName:
          type: string
          nullable: true
          maxLength: 255
          pattern: ^\w+$
        suffix:
          type: string
          nullable: true
          pattern: ^\w+$
          maxLength: 255
        birthDate:
          type: string
          format: date
          example: 2020-12-31
          maxLength: 10
        email:
          $ref: '#/components/schemas/Email'
          writeOnly: true
        phones:
          type: array
          maxItems: 50
          items:
            $ref: '#/components/schemas/Phone'
        addresses:
          type: array
          maxItems: 50
          items:
            $ref: '#/components/schemas/Address'
    
    Phone:
      description: Phone number
      type: object
      additionalProperties: false
      properties:
        number:
          type: string
          format: phone
          pattern: ^[0-9]+$
          maxLength: 15
        valid:
          type: boolean
        type:
          type: string
          enum:
          - home
          - mobile
          - work

    Address:
      description: Address of the Identity
      type: object
      additionalProperties: false
      properties:
        type:
          type: string
          enum:
          - primary
          - secondary
        address1:
          type: string
          example: 111 Main St.
          pattern: ^\w+$
          maxLength: 255
        address2:
          type: string
          pattern: ^\w*$
          maxLength: 255
          nullable: true
        city:
          type: string
          example: Cedar Falls
          pattern: ^\w+$
          maxLength: 255
        state:
          type: string
          maxLength: 2
          minLength: 2
          pattern: ^\w+$
          example: IA
        postalCode:
          type: string
          minLength: 5
          maxLength: 5
          pattern: ^\d+$
          example: 50613
        country:
          type: string
          maxLength: 2
          minLength: 2
          pattern: ^\w+$
          example: US
        validated: 
          type: boolean
        active: 
          type: boolean            