/*
 * Moov Identity API
 *
 * Handles all identities for tracking the users of the Moov platform.
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package invites

import (
	"crypto/rand"
	"encoding/base64"
	"errors"

	"github.com/google/uuid"
	"github.com/moov-io/identity/pkg/notifications"
	"github.com/moov-io/identity/pkg/stime"
	"github.com/moov-io/identity/pkg/zerotrust"

	api "github.com/moov-io/identity/pkg/api"
)

type InvitesService struct {
	config        InvitesConfig
	time          stime.TimeService
	repository    InvitesRepository
	notifications notifications.NotificationsService
}

func NewInvitesService(config InvitesConfig, time stime.TimeService, repository InvitesRepository, notifications notifications.NotificationsService) api.InvitesApiServicer {
	return &InvitesService{
		config:        config,
		time:          time,
		repository:    repository,
		notifications: notifications,
	}
}

// DeleteInvite - Delete an invite that was sent and invalidate the token.
func (s *InvitesService) DeleteInvite(session zerotrust.Session, inviteID string) error {
	s.repository.delete(session.TenantID, inviteID)
	return errors.New("service method 'DeleteInvite' not implemented")
}

// ListInvites - List outstanding invites
func (s *InvitesService) ListInvites(session zerotrust.Session) ([]api.Invite, error) {
	invites, err := s.repository.list(session.TenantID)
	return invites, err
}

// SendInvite - Send an email invite to a new user
func (s *InvitesService) SendInvite(session zerotrust.Session, send api.SendInvite) (*api.Invite, error) {
	invite := api.Invite{
		InviteID:  uuid.New().String(),
		TenantID:  session.TenantID.String(),
		Email:     send.Email,
		InvitedBy: session.CallerID.String(),
		InvitedOn: s.time.Now(),
		ExpiresOn: s.time.Now().Add(s.config.Expiration),
		Redeemed:  false,
	}

	code, err1 := generateInviteCode()
	if err1 != nil {
		return nil, err1
	}

	// add to DB
	created, err2 := s.repository.add(invite, *code)
	if err2 != nil {
		return nil, err2
	}

	// send email @TODO get url fixed up
	if err := s.notifications.SendInvite(created.Email, *code, "someurl"); err != nil {
		// clear out the one we added to the DB so it isn't just sitting around being unused.
		s.repository.delete(session.TenantID, created.InviteID)
		return nil, err
	}

	return created, nil
}

// Generate a large random crypto string to work as the invitation token
func generateInviteCode() (*string, error) {
	b := make([]byte, 36)
	_, err := rand.Read(b)
	if err != nil {
		return nil, err
	}

	code := base64.RawStdEncoding.EncodeToString(b)
	return &code, nil
}
