/*
 * Moov Identity API
 *
 * Handles all identities for tracking the users of the Moov platform. 
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package identityserver

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A IdentitiesApiController binds http requests to an api service and writes the service results to the http response
type IdentitiesApiController struct {
	service IdentitiesApiServicer
}

// NewIdentitiesApiController creates a default api controller
func NewIdentitiesApiController(s IdentitiesApiServicer) Router {
	return &IdentitiesApiController{ service: s }
}

// Routes returns all of the api route for the IdentitiesApiController
func (c *IdentitiesApiController) Routes() Routes {
	return Routes{ 
		{
			"IdentitiesGet",
			strings.ToUpper("Get"),
			"/identities",
			c.IdentitiesGet,
		},
		{
			"IdentitiesIdentityIDCredentialsGet",
			strings.ToUpper("Get"),
			"/identities/{identityID}/credentials",
			c.IdentitiesIdentityIDCredentialsGet,
		},
		{
			"IdentitiesIdentityIDGet",
			strings.ToUpper("Get"),
			"/identities/{identityID}",
			c.IdentitiesIdentityIDGet,
		},
		{
			"IdentitiesIdentityIDPut",
			strings.ToUpper("Put"),
			"/identities/{identityID}",
			c.IdentitiesIdentityIDPut,
		},
	}
}

// IdentitiesGet - List identities and associates userId
func (c *IdentitiesApiController) IdentitiesGet(w http.ResponseWriter, r *http.Request) { 
	query := r.URL.Query()
	orgID := query.Get("orgID")
	result, err := c.service.IdentitiesGet(orgID)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// IdentitiesIdentityIDCredentialsGet - List the credentials this user has used.
func (c *IdentitiesApiController) IdentitiesIdentityIDCredentialsGet(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	identityID := params["identityID"]
	result, err := c.service.IdentitiesIdentityIDCredentialsGet(identityID)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// IdentitiesIdentityIDGet - List identities and associates userId
func (c *IdentitiesApiController) IdentitiesIdentityIDGet(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	identityID := params["identityID"]
	result, err := c.service.IdentitiesIdentityIDGet(identityID)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// IdentitiesIdentityIDPut - Update a specific Identity
func (c *IdentitiesApiController) IdentitiesIdentityIDPut(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	identityID := params["identityID"]
	identity := &Identity{}
	if err := json.NewDecoder(r.Body).Decode(&identity); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.IdentitiesIdentityIDPut(identityID, *identity)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}
