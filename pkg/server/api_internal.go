/*
 * Moov Identity API
 *
 * Handles all identities for tracking the users of the Moov platform.
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package identityserver

import (
	"encoding/json"
	"net/http"
	"strings"
	//"github.com/gorilla/mux"
)

// A InternalAPIController binds http requests to an api service and writes the service results to the http response
type InternalAPIController struct {
	service InternalApiServicer
}

// NewInternalAPIController creates a default api controller
func NewInternalAPIController(s InternalApiServicer) Router {
	return &InternalAPIController{service: s}
}

// Routes returns all of the api route for the InternalApiController
func (c *InternalAPIController) Routes() Routes {
	return Routes{
		{
			"LoginWithCredentials",
			strings.ToUpper("Post"),
			"/login",
			c.LoginWithCredentials,
		},
		{
			"RegisterWithCredentials",
			strings.ToUpper("Post"),
			"/register",
			c.RegisterWithCredentials,
		},
	}
}

// LoginWithCredentials - Complete a login via a OIDC. Once the OIDC client service has authenticated their identity the client service will call  this endpoint to record and finish the login to get their token to use the API.  If the client service recieves a 404 they must send them to registration if its allowed per the client or check for an invite for authenticated users email before sending to registration.
func (c *InternalAPIController) LoginWithCredentials(w http.ResponseWriter, r *http.Request) {
	login := &Login{}
	if err := json.NewDecoder(r.Body).Decode(&login); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.LoginWithCredentials(*login)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// RegisterWithCredentials - Register user based on OIDC credentials.  This is called by the OIDC client services we create to register the user with what  available information they have and obtain from the user.
func (c *InternalAPIController) RegisterWithCredentials(w http.ResponseWriter, r *http.Request) {
	register := &Register{}
	if err := json.NewDecoder(r.Body).Decode(&register); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.RegisterWithCredentials(*register)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}
