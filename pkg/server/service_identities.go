/*
 * Moov Identity API
 *
 * Handles all identities for tracking the users of the Moov platform.
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package identityserver

import (
	"errors"

	"github.com/google/uuid"
)

// IdentitiesApiService is a service that implents the logic for the IdentitiesApiServicer
// This service should implement the business logic for every endpoint for the IdentitiesApi API.
// Include any external packages or services that will be required by this service.
type IdentitiesService struct {
	time       TimeService
	repository IdentityRepository
}

// NewIdentitiesApiService creates a default api service
func NewIdentitiesService(time TimeService, repository IdentityRepository) *IdentitiesService {
	return &IdentitiesService{
		time:       time,
		repository: repository,
	}
}

// DisableIdentity - Disable an identity. Its left around for historical reporting
func (s *IdentitiesService) DisableIdentity(identityID string) (interface{}, error) {
	// TODO - update DisableIdentity with the required logic for this service method.
	// Add api_identities_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.
	return nil, errors.New("service method 'DisableIdentity' not implemented")
}

// GetIdentity - List identities and associates userId
func (s *IdentitiesService) GetIdentity(identityID string) (interface{}, error) {
	i, e := s.repository.get("1", identityID)
	if e != nil {
		return nil, errors.New("Identity not found")
	}
	return i, nil
}

// ListIdentities - List identities and associates userId
func (s *IdentitiesService) ListIdentities(orgID string) (interface{}, error) {
	// TODO - update ListIdentities with the required logic for this service method.
	// Add api_identities_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.
	return nil, errors.New("service method 'ListIdentities' not implemented")
}

// UpdateIdentity - Update a specific Identity
func (s *IdentitiesService) UpdateIdentity(identityID string, identity UpdateIdentity) (interface{}, error) {
	// TODO - update UpdateIdentity with the required logic for this service method.
	// Add api_identities_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.
	return nil, errors.New("service method 'UpdateIdentity' not implemented")
}

func (s *IdentitiesService) Register(register Register) (*Identity, error) {
	identity := Identity{
		IdentityID:    uuid.New().String(),
		FirstName:     register.FirstName,
		MiddleName:    register.MiddleName,
		LastName:      register.LastName,
		NickName:      register.NickName,
		Suffix:        register.Suffix,
		BirthDate:     register.BirthDate,
		Status:        "none",
		Email:         register.Email,
		EmailVerified: false,
		Phones:        register.Phones,
		Addresses:     register.Addresses,
		RegisteredOn:  s.time.Now(),
		LastLogin:     LastLogin{},
	}

	saved, err := s.repository.add(identity)
	if err != nil {
		return nil, err
	}

	// @TODO record user was registered

	// @TODO send email notification to get registered email verified

	return &saved, nil
}
