/*
 * Moov Identity API
 *
 * Handles all identities for tracking the users of the Moov platform.
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"context"
	"crypto/tls"
	"database/sql"
	"fmt"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/gorilla/mux"
	"github.com/moov-io/base/admin"
	_ "github.com/moov-io/identity" // need to import the embedded files

	"github.com/go-kit/kit/log"
	api "github.com/moov-io/identity/pkg/api"
	"github.com/moov-io/identity/pkg/authn"
	config "github.com/moov-io/identity/pkg/config"
	"github.com/moov-io/identity/pkg/credentials"
	"github.com/moov-io/identity/pkg/database"
	"github.com/moov-io/identity/pkg/identities"
	"github.com/moov-io/identity/pkg/invites"
	"github.com/moov-io/identity/pkg/notifications"
	"github.com/moov-io/identity/pkg/stime"
	"github.com/moov-io/identity/pkg/webkeys"
	"github.com/moov-io/identity/pkg/zerotrust"
)

var logger log.Logger

func main() {
	logger = log.NewLogfmtLogger(log.NewSyncWriter(os.Stderr))

	// Listen for application termination.
	terminationListener := newTerminationListener()

	ConfigService := config.NewConfigService(logger)

	config := &Config{}
	if err := ConfigService.Load(config); err != nil {
		return
	}

	//db setup
	db, close := initializeDatabase(logger, config.Database)
	defer close()

	adminServer := bootAdminServer(terminationListener, logger, config.Servers.Admin)
	defer adminServer.Shutdown()

	TimeService := stime.NewSystemTimeService()

	FrontchannelJwks, err := webkeys.NewWebKeysService(logger, config.Authentication.Frontchannel)
	if err != nil {
		logger.Log("main", "Unable to load up up the Frontchannel JSON Web Key Set")
		return
	}

	BackchannelJwks, err := webkeys.NewWebKeysService(logger, config.Authentication.Backchannel)
	if err != nil {
		logger.Log("main", "Unable to load up the Backchannel JSON Web Key Set")
	}

	TokenService := authn.NewTokenService(TimeService, FrontchannelJwks, config.Authentication.Frontchannel.Expiration)

	NotificationsService := notifications.NewNotificationsService(config.Notifications)

	IdentityRepository := identities.NewIdentityRepository(db)
	IdentitiesService := identities.NewIdentitiesService(TimeService, IdentityRepository)

	CredentialRepository := credentials.NewCredentialRepository(db)
	CredentialsService := credentials.NewCredentialsService(TimeService, CredentialRepository)

	InvitesRepository := invites.NewInvitesRepository(db)
	InvitesService := invites.NewInvitesService(config.Invites, TimeService, InvitesRepository, NotificationsService)

	InternalService := authn.NewInternalService(*CredentialsService, *IdentitiesService, TokenService)

	// internal server
	InternalController := authn.NewInternalAPIController(InternalService)
	privateRouter := api.NewRouter(InternalController)
	_, shutdownPrivateServer := bootHTTPServer("private", privateRouter, terminationListener, logger, config.Servers.Private)
	defer shutdownPrivateServer()

	// public server

	// auth middleware for the back channel
	AuthMiddleware, err := zerotrust.NewJWTMiddleware(BackchannelJwks)
	if err != nil {
		logger.Log("main", fmt.Sprintf("Can't startup the front channel middleware - %s", err))
		return
	}

	// debug api
	WhoAmIController := authn.NewWhoAmIController()

	IdentitiesController := identities.NewIdentitiesApiController(IdentitiesService)
	CredentialsController := credentials.NewCredentialsApiController(CredentialsService)
	InvitesController := invites.NewInvitesController(InvitesService)
	publicRouter := api.NewRouter(IdentitiesController, CredentialsController, InvitesController, WhoAmIController)

	// Add the auth middleware.
	publicRouter.Use(AuthMiddleware.Handler)

	_, shutdownPublicServer := bootHTTPServer("public", publicRouter, terminationListener, logger, config.Servers.Public)
	defer shutdownPublicServer()

	awaitTermination(terminationListener)
}

func newTerminationListener() chan error {
	errs := make(chan error)
	go func() {
		c := make(chan os.Signal, 1)
		signal.Notify(c, syscall.SIGINT, syscall.SIGTERM)
		errs <- fmt.Errorf("%s", <-c)
	}()

	return errs
}

func awaitTermination(terminationListener chan error) {
	if err := <-terminationListener; err != nil {
		logger.Log("exit", err)
	}
}

func bootHTTPServer(name string, routes *mux.Router, errs chan<- error, logger log.Logger, config HTTPConfig) (*http.Server, func()) {

	// Create main HTTP server
	serve := &http.Server{
		Addr:    config.Bind.Address,
		Handler: routes,
		TLSConfig: &tls.Config{
			InsecureSkipVerify:       false,
			PreferServerCipherSuites: true,
			MinVersion:               tls.VersionTLS12,
		},
		ReadTimeout:  30 * time.Second,
		WriteTimeout: 30 * time.Second,
		IdleTimeout:  60 * time.Second,
	}

	// Start main HTTP server
	go func() {
		logger.Log(name, fmt.Sprintf("listening on %s", config.Bind.Address))
		if err := serve.ListenAndServe(); err != nil {
			err = fmt.Errorf("problem starting http: %v", err)
			logger.Log(name, err)
			errs <- err // send err to shutdown channel
		}
	}()

	shutdownServer := func() {
		if err := serve.Shutdown(context.TODO()); err != nil {
			logger.Log(name, err)
		}
	}

	return serve, shutdownServer
}

func bootAdminServer(errs chan<- error, logger log.Logger, config HTTPConfig) *admin.Server {
	adminServer := admin.NewServer(config.Bind.Address)

	go func() {
		logger.Log("admin", fmt.Sprintf("listening on %s", adminServer.BindAddr()))
		if err := adminServer.Listen(); err != nil {
			err = fmt.Errorf("problem starting admin http: %v", err)
			logger.Log("admin", err)
			errs <- err // send err to shutdown channel
		}
	}()

	return adminServer
}

func initializeDatabase(logger log.Logger, config database.DatabaseConfig) (*sql.DB, func()) {
	ctx, cancelFunc := context.WithCancel(context.Background())

	// migrate database
	db, err := database.New(ctx, logger, config)
	if err != nil {
		panic(fmt.Sprintf("error creating database: %v", err))
	}

	shutdown := func() {
		cancelFunc()
		if err := db.Close(); err != nil {
			logger.Log("exit", err)
		}
	}

	if err := database.RunMigrations(db, config); err != nil {
		panic(fmt.Sprintf("Error running migrations: %s", err))
	}

	return db, shutdown
}
